# Documentation
# https://www.klipper3d.org/G-Codes.html
# https://www.klipper3d.org/Command_Templates.html

################################################################################
# Included macros
################################################################################

[include print_management.cfg]
[include prime_line.cfg]
[include filament_management.cfg]
[include macros_marlin.cfg]
[include pa_test.cfg]
[include tones.cfg]
[include TEST_SPEED.cfg]
[include exclude_object.cfg]



# Beeper #######################################################################

# [delayed_gcode my_timer]
# variable_repeat_timer: 0
#   {% if 'S' in params %}
#   {% set seconds = params.S|int %}
# gcode:  M300 S1174 P401

# [gcode_macro test_BEEP]
# gcode:  M300 S1174 P401
#     {% if 'S' in params %}
#     {% set seconds = params.S|int %}

#     SET_GCODE_VARIABLE MACRO=M155 VARIABLE=repeat_timer VALUE={seconds}
#     UPDATE_DELAYED_GCODE ID=my_timer DURATION={seconds}
#     {% endif %}

# Возможно, я не понимаю эту дискуссию, но:
# M140: Начать нагрев «в фоновом режиме» и продолжить
# M104: Начать нагрев и ДОЖДАТЬСЯ, пока не будет достигнута температура, прежде чем продолжить
# То же самое для M190 / M109
# Так в чем проблема с использованием неблокирующих вариантов?

# [gcode_macro M155]
# description: Mimics Marlin code to output temp's on a 'S'chedule.
# variable_repeat_timer: 0
# gcode:
#   {% if 'S' in params %}
#   {% set seconds = params.S|int %}
#     #RESPOND MSG="time in seconds:"{seconds}
#     SET_GCODE_VARIABLE MACRO=M155 VARIABLE=repeat_timer VALUE={seconds}
#     UPDATE_DELAYED_GCODE ID=respond_temp_timer DURATION={seconds}
#   {% endif %}
  
# [delayed_gcode respond_temp_timer]
# initial_duration: 0
# gcode:
# #    {% set time = params.VALUE|int %}
# #    RESPOND MSG="time2 in seconds:"{params.REPEAT}%
#     SET_LED LED=grandcentral_neopixel RED=1.00 GREEN=1.00 BLUE=0.00 INDEX=1
#     G4 P100
#     SET_LED LED=grandcentral_neopixel RED=0.00 GREEN=1.00 BLUE=0.00 INDEX=1
#     G4 P100
#     UPDATE_DELAYED_GCODE ID=respond_temp_timer DURATION={printer['gcode_macro M155'].repeat_timer}


# [gcode_macro TST]
# # rename_existing: M118.1
# # gcode:
# #   M118.1 {rawparams}
#   {action_respond_info(rawparams)}

[respond]
default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
    #    echo: "echo: " (This is the default)
    #    command: "// "
    #    error: "!! "
default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".


[gcode_macro BEEP]
gcode:
    {% set S = params.S|default(1000)|int %}                                    # frequency in Hz
    {% set P = params.P|default(100)|int %}                                     # duration in milliseconds
    SET_PIN PIN=_BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=_BEEPER_pin VALUE=0


[gcode_macro M300]
gcode:  
    {% set S = params.S|default(2000)|int %} # S sets the tone frequency
    {% set P = params.P|default(100)|int %} #P sets the tone duration
    {% set L = 0.5 %} # L varies the PWM on time, close to 0 or 1 the tone gets a bit quieter. 0.5 is a symmetric waveform
    {% if S <= 0 %} # dont divide through zero
        {% set F = 1 %}
        {% set L = 0 %}
    {% elif S >= 10000 %} #max frequency set to 10kHz
        {% set F = 0 %}
    {% else %}
        {% set F = 1/S %} #convert frequency to seconds 
    {% endif %}
    SET_PIN PIN=_BEEPER_pin VALUE={L} CYCLE_TIME={F} #Play tone
    G4 P{P} #tone duration
    SET_PIN PIN=_BEEPER_pin VALUE=0

# Other ########################################################################



################################################################################

[gcode_macro M204]
description: Set Acceleration
# Klipper accepts M204 S<value> OR M204 P<value> T<value> where both P and T must be specified
# PrusaSliser sends M204 P<value> without T and Klipper shows an error
# This macro makes M204 command more versatile
rename_existing: M204.1
gcode:
    {% set factor = params.F|default(0.5)|float %}
    {% if 'S' in params %}
        {% set ASSEL = params.S|default(0)|float %}
    {% else %}
        {% if 'P' in params %}
            {% if 'T' in params %}
                {% if P|int < T|int %}
                    {% set ASSEL = params.P|default(0)|float %}
                {% else %}
                    {% set ASSEL = params.T|default(0)|float %}
                {% endif %}
            {% else %}
                {% set ASSEL = params.P|default(0)|float %}
            {% endif %}
        {% elif 'T' in params %}
            {% set ASSEL = params.T|default(0)|float %}
        {% endif %}
    {% endif %}
    SET_VELOCITY_LIMIT ACCEL={ASSEL} ACCEL_TO_DECEL={ASSEL*factor}


# TUNING_TOWER COMMAND=SET_RETRACTIONLENGTH PARAMETER=LENGTH START=0.5 FACTOR=.007
[gcode_macro SET_RETRACTIONLENGTH]
gcode:
  SET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}
  GET_RETRACTION