# SUPER SLICER START G_CODE
# START_PRINT FIRST_EXTRUDER_TEMP=[first_layer_temperature] EXTRUDER_TEMP=[temperature] FIRST_BED_TEMP=[first_layer_bed_temperature] BED_TEMP=[bed_temperature]


# TUTORIAL TUTORIAL TUTORIAL TUTORIAL TUTORIAL TUTORIAL TUTORIAL 
# 
# https://klipper.discourse.group/t/macro-creation-tutorial/30/6
#
# TUTORIAL TUTORIAL TUTORIAL TUTORIAL TUTORIAL TUTORIAL TUTORIAL 
# SEARCH_VARS s="profile"
[gcode_macro SEARCH_VARS]  #поиск по объекту принтера https://klipper.discourse.group/t/example-search-printer-objects/164
gcode:
  {% set search = params.S|lower %}
  {% set ns = namespace() %}
  {% for item in printer  %}
    {% if ' ' in item %}
      {% set ns.path = ['printer', "['%s']" % (item), ''] %}
    {% else %}
      {% set ns.path = ['printer.', item, ''] %}   
    {% endif %} 

    {% if search in ns.path|lower %}
      { action_respond_info(ns.path|join) }
    {% endif %} 

    {% if printer[item].items() %}
      {% for childkey, child in printer[item].items() recursive %}
        {% set ns.path = ns.path[:loop.depth|int + 1] %}

        {% if ' ' in childkey %}
          {% set null = ns.path.append("['%s']" % (childkey)) %}
        {% else %}
          {% set null = ns.path.append(".%s" % (childkey)) %}
        {% endif %} 

        {% if child is mapping  %}
          { loop(child.items()) }
        {% else %}
          {% if search in ns.path|lower %}
            { action_respond_info("%s : %s" % (ns.path|join, child)) }   
          {% endif %} 
        {% endif %} 
        
      {% endfor %}
    {% endif %} 
  {% endfor %}


# [gcode_macro SENSORLESS_HOME]
# gcode:
#     {% set HOME_CUR = 0.8}
#     {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
#     {% set RUN_CUR = driver_config.run_current %}
#     # Set current for sensorless homing
    
#     SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
#     # Pause to ensure driver stall flag is clear
#     G4 P2000
#     # Home
#     G28 X0
#     # Move away
#     G90
#     G1 X5 F1200
#     # Set current during print
#     SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}
    
#     #{ action_respond_info("HOMING Y")}
#     SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
#     # Pause to ensure driver stall flag is clear
#     G4 P2000
#     # Home
#     G28 Y0
#     # Move away
#     G90
#     G1 Y5 F1200
#     # Set current during print
#     SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}

[homing_override]
axes: xy
gcode: 
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
    
  {% if home_all or 'X' in params %}
    _HOME_X
  {% endif %}
  
  {% if home_all or 'Y' in params %}
    _HOME_Y
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    _HOME_Z
  {% endif %}


[gcode_macro _HOME_X]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.8 %}
    { action_respond_info("RUN_CURRENT_X - %s" %(RUN_CURRENT_X))}
    { action_respond_info("RUN_CURRENT_Y - %s" %(RUN_CURRENT_Y))}

    # enable spread
    #SET_TMC_FIELD FIELD=TPWMTHRS VALUE=0 STEPPER=stepper_x
    #SET_TMC_FIELD STEPPER=stepper_x FIELD=en_spreadCycle VALUE=1

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    # Home
    G28 X0
    # Move away
    #G91
    G1 X5 F1200
    # wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current for printing
    # SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    # SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.8 %}
    { action_respond_info("RUN_CURRENT_X - %s" %(RUN_CURRENT_X))}
    { action_respond_info("RUN_CURRENT_Y - %s" %(RUN_CURRENT_Y))}

    # enable spread
    #SET_TMC_FIELD FIELD=TPWMTHRS VALUE=0 STEPPER=stepper_y
    #SET_TMC_FIELD STEPPER=stepper_y FIELD=en_spreadCycle VALUE=1

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    # Home
    G28 Y0
    # Move away
    #G91
    G1 Y5 F1200
    # wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current for printing
    # SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    # SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]
gcode:
    G28 Z0
    G1 Z25

# Print Job Management #########################################################

[gcode_macro _SET_FAN_SPEED]
gcode:
  M106 S{ (params.PERCENT | float) * 255 / 100 }


[gcode_macro _CENTER]
gcode:
  G90
  G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/4 } F7000

[gcode_macro _HOME]
gcode:
  {% if printer.homed_axes != 'XYZ' %}
    G28
  {% endif %}


#https://klipper.discourse.group/t/macro-creation-tutorial/30/6
[gcode_macro START_PRINT]  
variable_retract: 5
gcode:

################################### Slicer start g-code  ###################################
# MAIN_PRINT EXTRUDER_TEMP=[first_layer_temperature] BED_TEMP=[first_layer_bed_temperature] PA=[PRESSURE_ADVANCE] RETRACTION_LENGTH=[filament_retract_length] RETRACTION_SPEED=[filament_retract_speed] DERETRACTION_SPEED=[filament_deretract_speed]  Z_OFFSET=[z_offset]
################################### Slicer start g-code  ###################################

  {% set extruder_temp = params.EXTRUDER_TEMP|default(150)|float|round(1) %}
  {% set bed_temp = params.BED_TEMP|default(50)|float|round(1) %}

  {% set z_offset = params.Z_OFFSET|default(0)|float %}

  {% set retract_l = params.RETRACTION_LENGTH|default(0.5)|float %}
  {% set retract_s = params.RETRACTION_SPEED|default(20)|float %}
  {% set deretract_l = params.DERETRACTION_LENGTH|default(0)|float %}
  {% set deretract_s = params.DERETRACTION_SPEED|default(retract_s)|float %}
   
  SET_RETRACTION RETRACT_LENGTH={retract_l} RETRACT_SPEED={retract_s} UNRETRACT_SPEED={deretract_s} UNRETRACT_EXTRA_LENGTH={deretract_l}
  

  {% if printer.homed_axes != 'XYZ' %}
    G28			#Home All Axes
	{% endif %}

  #! {% set z_offset = params.Z_OFFSET|default(0)|int %}
  #! PRIME_LINE Z_OFFSET = {z_offset}
  #! {% set E = printer["gcode_macro START_PRINT"].retract|float %}
  {% if bed_temp > 90 %}
    {% set bed_temp_preheat = (bed_temp * 0.90)|int %}
  {% else %}
    {% set bed_temp_preheat = (bed_temp * 0.75)|int %}
  {% endif %}

  {% set start_bed_temp = printer.heater_bed.temperature %}
  { action_respond_info("Bed Temp = %.2f"  %(start_bed_temp))}
  #M118 BED TEMP: {start_bed_temp}
  CLEAR_PAUSE
  BEEP P=200 S=500
  #G28                                                                         # home
  M220 S100                                                                   # reset feedrate
  M221 S100                                                                   # reset flowrate
  G90                                                                         # absolute positioning
  M83                                                                         # relative extrusion mode
  #BEEP P=200 S=500
  G90   

  {% if  start_bed_temp > bed_temp - 40 %}
    {% if  start_bed_temp < bed_temp - 20 %}
      {action_respond_info("SHORT HEATING: %.2f" %(start_bed_temp))}
      BEEP P=400 S=200
      BEEP P=400 S=200
      BEEP P=400 S=200
      SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp + 5.0}            # set bed temp
      TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp + 5.0}                 # wait for bed temp
      #G4 P30000
      G4 P{3 * 60 * 1000 }
      TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp}                       # wait for bed temp
      BEEP P=300 S=700
      { action_respond_info("EXTRUDER HEATING: = %.2f"  %(extruder_temp))}
      #M118 EXTRUDER HEATING: {extruder_temp}
      SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}                  # set bed temp
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}               # set extruder temp
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}                    # wait for extruder temp
    {% else %}
      {action_respond_info("HEATING: %.2f" %(start_bed_temp))}
      #M118 HEATING: {start_bed_temp}
      BEEP P=400 S=200
      BEEP P=400 S=200
      BEEP P=400 S=200
      SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp + 5.0}            # set bed temp
      TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp + 5.0}                 # wait for bed temp
      #G4 P10000
      TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp}                       # wait for bed temp
      BEEP P=300 S=700
      #M118 EXTRUDER HEATING: {extruder_temp}
      { action_respond_info("EXTRUDER HEATING: = %.2f"  %(extruder_temp))}
      SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}                  # set bed temp
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}               # set extruder temp
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}                    # wait for extruder temp
    {% endif %}

    #G4 P10000
    #G4 P{ 5 * 60 * 1000 }       #Milliseconds to dwell
  {% else %}
    BEEP P=400 S=2000
    BEEP P=400 S=2000
    BEEP P=400 S=2000
    
    {action_respond_info("RAISE BED")}                                                                      # absolute positioning
    #M118 RAISE BED
    G0 Z50 F600                                                                # raise bed
    #M118 LONG HEATING: {start_bed_temp}
    {action_respond_info("LONG HEATING: %.2f" %(start_bed_temp))}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp + 5.0}            # set bed temp
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp + 5.0}                       # wait for bed temp
    #G4 P800000
    G4 P{5 * 60 * 1000 }
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp}                       # wait for bed temp
    BEEP P=400 S=700
    {action_respond_info("EXTRUDER HEATING: %.2f" %(extruder_temp))}
    #M118 EXTRUDER HEATING: {extruder_temp}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}               # set extruder temp
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}                    # wait for extruder temp
  {% endif %}
  G1 E{E} F2100                                                               # prime
  BEEP P=500 S=700
  BEEP P=500 S=700
  BEEP P=500 S=700
  G1 Z10 F600                                                                 # raise Z

  SET_GCODE_OFFSET Z_ADJUST=z_offset MOVE=1
  PRIME_LINE


[gcode_macro END_PRINT]
gcode:
  {% set E = printer["gcode_macro MAIN_PRINT"].retract|float %}
  TURN_OFF_HEATERS
  M107                                                                        # turn off fan
  G91                                                                         # relative positioning
  G1 E-{E} F2000                                                              # retract
  G0 X1 Y1 F6000                                                              # wipe
  G0 Z2 F600                                                                  # raise Z
  G90                                                                         # absolute positioning
  PARK Z=30
  M84                                                                         # turn off all motors
  BEEP P=200 S=250
  SAVE_UPDATES
  #UPDATE_DELAYED_GCODE ID=OFF_ALL DURATION=5

################### OFF_ALL AND FRIENDS ############################

[delayed_gcode _OFF_ALL_WAIT]
gcode:
#   {% if printer.extruder.temperature < 50  and printer.heater_bed.temperature < 50 %}
    { action_respond_info("extruder.temperature %.2f" %(printer.extruder.temperature))}
    {% if printer.extruder.temperature < 50 %}
        { action_respond_info("PRINTER TURN OFF")}
        UPDATE_DELAYED_GCODE ID=_OFF_ALL_WAIT DURATION=0
        _OFF_FAN
        _OFF_LIGHT
        _OFF_PRINTER
        { action_respond_info("PRINTER TURN OFF !!!!")}
    {% endif %}
    UPDATE_DELAYED_GCODE ID=_OFF_ALL_WAIT DURATION=5

[gcode_macro OFF_ALL]
gcode:
    TURN_OFF_HEATERS
    UPDATE_DELAYED_GCODE ID=_OFF_ALL_WAIT DURATION=5


[gcode_macro _OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="printer",
                             state="off")}

[gcode_macro _OFF_LIGHT]
gcode:
  {action_call_remote_method("set_device_power",
                             device="light",
                             state="off")}

[gcode_macro _OFF_FAN]
gcode:
  {action_call_remote_method("set_device_power",
                             device="fan",
                             state="off")}
################### END OFF_ALL AND FRIENDS ############################

[gcode_macro PARK]
gcode:
  {% set x_park = params.X|default(printer.toolhead.axis_minimum.x)|float %}
  {% set y_park = params.Y|default(printer.toolhead.axis_minimum.y)|float %}
  {% set z_park = params.Z|default(10)|float + printer.toolhead.position.z|float %}
  {% set x_max = printer.toolhead.axis_maximum.x|float %}
  {% set y_max = printer.toolhead.axis_maximum.y|float %}
  {% set z_max = printer.toolhead.axis_maximum.z|float %}
  {% if x_park > x_max %}
    {% set x_park = x_max %}
  {% endif %}
  {% if y_park > y_max %}
    {% set y_park = y_max %}
  {% endif %}
  {% if z_park > z_max %}
    {% set z_park = z_max %}
  {% endif %}
  SAVE_GCODE_STATE NAME=PARK_STATE
  {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}               # home if not homed
  G90                                                                         # absolute positioning
  G0 Z{z_park} F600 
  G0 X{x_park} Y{y_park} F6000
  RESTORE_GCODE_STATE name=PARK_STATE
  

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: BASE_PAUSE
gcode:
  {% set E = printer["gcode_macro START_PRINT"].retract|float %}
  SAVE_GCODE_STATE NAME=PAUSE_STATE
  BASE_PAUSE
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E-{E} F2100                                                          # retract
    G90
  {% else %}
    {action_respond_info("Extruder is not hot enough")}
  {% endif %}
  PARK

# [gcode_macro PAUSE2]
# description: Pause the actual running print
# rename_existing: BASE_PAUSE
# gcode:
#   {% set E = printer["gcode_macro START_PRINT"].retract|float %}
#   SAVE_GCODE_STATE NAME=PAUSE_STATE
#   BASE_PAUSE
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     G91
#     G1 E-{E} F2100                                                          # retract
#     G90
#   {% else %}
#     {action_respond_info("Extruder is not hot enough")}
#   {% endif %}
#   G1 X10 Y10 F5000
#   G1 Z50 F1000


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: BASE_RESUME
gcode:
  {% set E = printer["gcode_macro START_PRINT"].retract|float %}
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
    G90
  {% else %}
    {action_respond_info("Extruder is not hot enough")}
  {% endif %}  
  RESTORE_GCODE_STATE NAME=PAUSE_STATE MOVE=1
  BASE_RESUME {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: BASE_CANCEL_PRINT
gcode:
  {% set E = printer["gcode_macro START_PRINT"].retract|float %}
  CLEAR_PAUSE
  TURN_OFF_HEATERS
  G1 E-{E} F2100                                                          # retract
  M107                                                                        # turn off fan
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91                                                                     # relative positioning
    G0 Z2 F600                                                              # raise Z
    #G1 E-{E} F2100                                                          # retract
    G90                                                                     # absolute positioning
  {% else %}
    {action_respond_info("Extruder is not hot enough")}
  {% endif %}
  SDCARD_RESET_FILE
  BASE_CANCEL_PRINT
  PARK Z=30
  M84                                                                         # turn off all motors

# Save to Config ##########################################################

[gcode_macro SAVE_UPDATES]
description: Run SAVE_CONFIG if there are updates that it may persist to disk
gcode:
  {% if printer.configfile.save_config_pending %}
  
    { action_respond_info("Saving and restarting now")}
    #M118 Saving and restarting now
    G4 P2000                                                                # wait 2 seconds
    SAVE_CONFIG
  {% endif %}

################################################################################


[gcode_macro MAIN_PRINT]

# variable_var: {'temp'        : {'extruder': 245.0, 'bed': {'target' : 245, 'start' : 0}, 'chamber': 40.0},
#                'delta'       : {'chamber': 5.0, 'bed': 10},
#                'time'        : {'soak' : 1800, 'soak_extra' : 900, 'remaining' : 0, 'elapsed' : 0, 'interval' : 0.1},
#                'soak'        : {'exp' : 1.1, 'factor' : 100, 'check_interval' : 0},
#                'var1'        : True,
#                'var2'        : 0.0}
variable_retract: 5
variable_var: {}
variable_stage: 'Prepare'
variable_preheat_time_remaining: 0
variable_preheat_time_soak: 0
gcode:
    _HOME
    BASE_RESUME
    { action_respond_info("set PA")}
    {% if not params.PA %}
        {% set PA = printer.configfile.settings.extruder.pressure_advance %}
        { action_respond_info("default PA %.6f" %(PA))}
    {% else %}
        {% set PA = params.PA|float %}
        { action_respond_info("PA %.6f" %(PA))}
    {% endif %}
    # SET_PRESSURE_ADVANCE ADVANCE={PA}
    SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={PA}

    {% set temp_bed_target = params.BED_TEMP|default(40)|float|round(1) %}
    {% set temp_bed_start = printer.heater_bed.temperature|float  %}
    {% set temp_extruder = params.EXTRUDER_TEMP|default(80)|float|round(1) %}
    {% set temp_chamber = params.CHAMBER_TEMP|default(20)|float|round(1) %}
    {% set delta_chamber = params.DELTA_C|default(5)|float|round(1) %}
    {% set delta_bed = params.DELTA_B|default(10)|float|round(1) %}
    {% set z_offset = params.Z_OFFSET|default(0)|float %}

    {% set retract_l = params.RETRACTION_LENGTH|default(0.5)|float %}
    {% set retract_s = params.RETRACTION_SPEED|default(20)|float %}
    # {% set deretract_l = params.DERETRACTION_LENGTH |default(0)|float %}
    {% set deretract_l = (retract_l * 0.8)|default(0)|float %}
    {% set deretract_s = params.DERETRACTION_SPEED|default(retract_s)|float %}
    SET_RETRACTION RETRACT_LENGTH={retract_l} RETRACT_SPEED={retract_s} UNRETRACT_SPEED={deretract_s} UNRETRACT_EXTRA_LENGTH=0
    
    {% if stage == 'Prepare' %}
        {% set var = {'temp': { 'extruder'      : temp_extruder,
                                'bed' :         {   'start' : temp_bed_start,
                                                    'target' : temp_bed_target},           
                                'chamber'       : temp_chamber},
                    'delta': {  'chamber'       : delta_chamber, 
                                'bed'           : delta_bed},
                    'time' : {  'soak'          : 0,
                                'soak_extra'    : 0,
                                'remaining'     : 0,
                                'elapsed'       : 0,
                                'interval' :    {   'soak'      : 5,
                                                    'extruder'  : 0.5}},
                    'soak' :  { 'exp'           : 1.1, #1.3
                                'factor'        : 100},
                    'var1'  : True,
                    'z_offset'  : z_offset} %}    

        { action_respond_info ("START\n  temp.bed.start: %.1f \n temp.bed.tarrget: %.1f \n stage: %s \n time.interval.soak: %.2f \n time.interval.extruder: %.2f \n pressure advance: %.6f \n z_offset: %.6f \n" %(var.temp.bed.start, var.temp.bed.target, stage, var.time.interval.soak, var.time.interval.extruder, PA, var.z_offset))}
        
        UPDATE_DELAYED_GCODE ID=_OFF_ALL_WAIT DURATION=0
        
        
        {% if var.temp.bed.start > var.temp.bed.target|int * 0.8 %}
            { action_respond_info("HEATING WITHOUT SOAKING")}
            {% set _dummy = var.time.update({'soak': 0}) %}
        {% else %}
            #{% set preheat_time_remaining = (((target_temp|int - start_bed_temp|int) ** heat_time_exp|int) * heat_time_factor|int) %}
            {% set soak = ((var.temp.bed.target / var.temp.bed.start )|float ** var.soak.exp ) * var.soak.factor|int %}
            {% set _dummy = var.time.update({'soak' : soak|int }) %}
            {% if var.time.soak < 3 %}
                {% set _dummy = var.time.update({'soak' : 3}) %}
            {% endif %}
                { action_respond_info("LONG SOAKING: %.f sec" %(var.time.soak))}
        {% endif %}
            
            #!test {% set _dummy = var.time.update({'soak': 30}) %}

            # { action_respond_info ("TUT1")}
        BASE_PAUSE
        {% set stage = "TurnOnBed" %}
        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=var VALUE="{var}"
        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=stage VALUE="'{ stage }'"
        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=preheat_time_soak VALUE="{ var.time.soak }"
        UPDATE_DELAYED_GCODE ID=MAIN_PRINT_WAIT DURATION=0.5
        G4 P1 # dwell for 1ms to prevent from going idle
        # { action_respond_info ("TUT2")}
    {% endif %}

[gcode_macro _EXP_TEST]
gcode:
    {% set exp=3**3.3 %}
    {action_respond_info("3*3*3 = %d" %(exp))} 

[gcode_macro MAIN_PRINT_CANCEL]
description: cancels an in-progress PREHEAT cycle
gcode:
  { action_respond_info("---> CANCEL PREHEAT <---")}
  SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=stage VALUE="'Cancel'"
  BASE_RESUME
  G4 P1 # dwell for 1ms to prevent from going idle
  UPDATE_DELAYED_GCODE ID=MAIN_PRINT_WAIT DURATION=0.05
  


[delayed_gcode MAIN_PRINT_WAIT]
gcode:
    {% macro print_time(text, time) %} ; print remaining time
        { action_respond_info("%s %2dmin %2dsec" %(text, (time|int // 60), (time|int % 60)))}
        M117 {'%s' % text} {(time|int // 60)}:{'%02d' % (time|int % 60)}
    {% endmacro %}

    {% set mainStart = printer['gcode_macro MAIN_PRINT'] %}
    {% set stage = mainStart.stage %}
    {% set preheat_time_remaining = mainStart.preheat_time_remaining %}
    {% set preheat_time_soak = mainStart.preheat_time_soak %}
    # { action_respond_info ("TUT3")}
###################################### Prepare ######################################
    {% if stage == "Cancel" %}
        { action_respond_info("stage %s" %(stage))}
        TURN_OFF_HEATERS
        M107 ; turn off fan
        BEEP P=200 S=2000

        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=stage VALUE='"Prepare"'
        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=var VALUE=0
        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=preheat_time_soak VALUE=0
        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=preheat_time_remaining VALUE=0
        { action_respond_info("---> CANCEL 2 <---")}
        UPDATE_DELAYED_GCODE ID=MAIN_PRINT_WAIT DURATION=0
        G4 P1 ## dwell for 1ms to prevent from going idle
        END_PRINT
        { action_respond_info("---> CANCEL 3 <---")}
###################################### Turn on Bed ######################################
    {% elif stage == "TurnOnBed" %}
        { action_respond_info("stage %s" %(stage))}
        { action_respond_info("var.time.soak %s" %(mainStart.var.time.soak))}
        { action_respond_info("Target bed temp %.1f" % (mainStart.var.temp.bed.target))}

        # SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=50
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={mainStart.var.temp.bed.target}
        {% if mainStart.var.time.soak > 30 %}
            #_HOME
            _CENTER # put the bed and nozzle where they're a safe distance apart
           _SET_FAN_SPEED PERCENT=20 # run the fan to circulate air
        {% endif %}
        # G28
        # M84 # turn off steppers
        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=stage VALUE='"HeatBed"'
        UPDATE_DELAYED_GCODE ID=MAIN_PRINT_WAIT DURATION=0.5
        G4 P1 ## dwell for 1ms to prevent from going idle
###################################### HeatBed ######################################
    {% elif stage == "HeatBed" %}
        { action_respond_info("stage %s" %(stage))}
        {% if printer.heater_bed.temperature >= mainStart.var.temp.bed.target %}
            BEEP P=200 S=200
            SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=stage VALUE='"HeatSoak"'
            UPDATE_DELAYED_GCODE ID=MAIN_PRINT_WAIT DURATION=0.5
            G4 P1 ## dwell for 1ms to prevent from going idle
        {% else %}
            UPDATE_DELAYED_GCODE ID=MAIN_PRINT_WAIT DURATION=5
            G4 P1 ## dwell for 1ms to prevent from going idle
        {% endif %}
###################################### HeatSoak ######################################
    {% elif stage == "HeatSoak" %}
        { action_respond_info("stage %s" %(stage))}
        #!!!!!!!!!!!!!!! СДЕЛАТЬ передачу переменной  !!!!!!!!!!!
        #{ action_respond_info("mainStart.var.time.soak %d" %(mainStart.var.time.soak))}
        # {% set preheat_time_remaining = [mainStart.var.time.soak - mainStart.var.time.interval.soak, 0] | max %}
        # {% set _dummy = mainStart.var.time.update({'soak': preheat_time_remaining}) %}
        # { action_respond_info("_dummy preheat_time_soak %d" %(preheat_time_soak))}
        #{ action_respond_info("preheat_time_soak %f" %(preheat_time_soak)) }
        {% set preheat_time_remaining = [preheat_time_soak - mainStart.var.time.interval.soak, 0] | max %}
        {print_time("Soak time remaining", preheat_time_remaining)}
        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=preheat_time_soak VALUE={ preheat_time_remaining } 
        {% if preheat_time_remaining == 0 %}
            SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=stage VALUE='"ChamberHeatOn"'
            UPDATE_DELAYED_GCODE ID=MAIN_PRINT_WAIT DURATION={mainStart.var.time.interval.soak}
            G4 P1 ## dwell for 1ms to prevent from going idle
        {% endif %}
        UPDATE_DELAYED_GCODE ID=MAIN_PRINT_WAIT DURATION={mainStart.var.time.interval.soak}
        G4 P1 ## dwell for 1ms to prevent from going idle
##################################### ChamberHeatOn ######################################
    {% elif stage == "ChamberHeatOn" %}
        { action_respond_info("stage %s" %(stage))}
        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=stage VALUE='"ChamberSoak"'
        UPDATE_DELAYED_GCODE ID=MAIN_PRINT_WAIT DURATION=0.5
        G4 P1 ## dwell for 1ms to prevent from going idle
###################################### ChamberSoak ######################################
    {% elif stage == "ChamberSoak" %}
        { action_respond_info("stage %s" %(stage))}
        # {% if printer['temperature_sensor pogoda'].temperature >= chamber_target_temp %}
        #     SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=stage VALUE='"ExtruderHat"'
        #     UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
        # {% endif %}
        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=stage VALUE='"ExtruderTurnOn"'
        UPDATE_DELAYED_GCODE ID=MAIN_PRINT_WAIT DURATION=0.5
        G4 P1 ## dwell for 1ms to prevent from going idle
###################################### Extruder Turn On ######################################
    {% elif stage == "ExtruderTurnOn" %}
        { action_respond_info("stage %s" %(stage))}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={mainStart.var.temp.extruder}               # set extruder temp
        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=stage VALUE='"ExtruderHat"'
        UPDATE_DELAYED_GCODE ID=MAIN_PRINT_WAIT DURATION=0.5
        G4 P1 ## dwell for 1ms to prevent from going idle
###################################### Extruder heating ######################################
    {% elif stage == "ExtruderHat" %}
            {% if  printer.extruder.temperature >= mainStart.var.temp.extruder %}
                { action_respond_info("stage %s" %(stage))}
                BEEP P=200 S=500
                SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=stage VALUE='"Final"'
                UPDATE_DELAYED_GCODE ID=MAIN_PRINT_WAIT DURATION={mainStart.var.time.interval.extruder}
                G4 P1 ## dwell for 1ms to prevent from going idle
            {% else %}
                UPDATE_DELAYED_GCODE ID=MAIN_PRINT_WAIT DURATION={mainStart.var.time.interval.extruder}
                G4 P1 ## dwell for 1ms to prevent from going idle
            {% endif %}
###################################### Final and print ######################################
    {% elif stage == "Final" %}
        { action_respond_info("stage %s" %(stage))}
        BEEP P=2000 S=4000
        _HOME

        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        #! SET_GCODE_OFFSET Z_ADJUST={mainStart.var.z_offset} # ХЗ что делать с офсетом, он и в гкоде и тут
        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        #!!! ХЗ НУЖНО ОНО ИЛИ НЕТ
        # SET_VELOCITY_LIMIT ACCEL=6000
        # SET_VELOCITY_LIMIT ACCEL_TO_DECEL=4000
        #Z_TILT_ADJUST
        #_HOME
        #!!! ХЗ НУЖНО ОНО ИЛИ НЕТ
        
        #{% set Ev = printer["gcode_macro MAIN_PRINT"].retract|float %}
        G91                                                                         # relative positioning
        #G1 E{printer["gcode_macro MAIN_PRINT"].retract} F2000                                                              # retract
        G1 E5 F2000                                                              # retract
        G90
        
        G92 E0        
        
        BASE_RESUME

        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=stage VALUE='"Prepare"'
        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=var VALUE=0
        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=stage VALUE=0
        SET_GCODE_VARIABLE MACRO=MAIN_PRINT VARIABLE=preheat_time_soak VALUE=0
        
        #? PRIME_LINE
        
        { action_respond_info("THE FIN!")}
        { action_respond_info("STARTING TO PRINT!")}
        { action_respond_info("stage must be Prepare?! - %s" %(stage))} #* Current stage print
        UPDATE_DELAYED_GCODE ID=MAIN_PRINT_WAIT DURATION=0
        G4 P1 ## dwell for 1ms to prevent from going idle


    # disable spread
    #SET_TMC_FIELD FIELD=TPWMTHRS VALUE=0 STEPPER=stepper_x
    #SET_TMC_FIELD STEPPER=stepper_x FIELD=en_spreadCycle VALUE=0
    
    #SET_TMC_FIELD FIELD=TPWMTHRS VALUE=0 STEPPER=stepper_y
    #SET_TMC_FIELD STEPPER=stepper_y FIELD=en_spreadCycle VALUE=0


        SET_TMC_CURRENT STEPPER=stepper_x CURRENT=0.85
        SET_TMC_CURRENT STEPPER=stepper_x HOLDCURRENT=0.5

        SET_TMC_CURRENT STEPPER=stepper_y CURRENT=0.85
        SET_TMC_CURRENT STEPPER=stepper_y HOLDCURRENT=0.5
    {% endif %}   
    #UPDATE_DELAYED_GCODE ID=MAIN_PRINT_WAIT DURATION=1


