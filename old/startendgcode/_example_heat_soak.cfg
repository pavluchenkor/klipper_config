[gcode_macro _SET_FAN_SPEED]
gcode:
    M106 S{ (params.PERCENT | float) * 255 / 100 }


[gcode_macro CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/2 } F7200



[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    { action_respond_info("TARGET: %.1f"  %(target_temp))}
    { action_respond_info("stage: %s"  %(stage))}
    ;; fire up the heater
    #SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }
    ;; run the fan to circulate air
    #_SET_FAN_SPEED PERCENT=50
    ;; put the bed and nozzle where they're a safe distance apart
    # G28
    # CENTER

    #M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    SET_GCODE_VARIABLE MACRO=PREHEAT VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    { action_respond_info("remaining time (min)  %.1f"  %(( preheat_time_remaining - total_time_elapsed ) / 60.0))}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}





[gcode_macro _START_PRINT_Upstreamfish]
## PrusaSliser: 
#    M190 S0
#    M109 S0
#    START_PRINT EXTRUDER_TEMP={first_layer_temperature[0]} BED_TEMP={first_layer_bed_temperature} MESH_DO=<1|0>
## Cura: 
# M190 S0
# M109 S0
# START_PRINT EXTRUDER_TEMP={material_print_temperature_layer_0} BED_TEMP={material_bed_temperature_layer_0} MESH_DO=<1|0>
description: Start routine for the print
variable_retract: 3
gcode:
    {% set bed_temp = params.BED_TEMP|default(60)|float %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(190)|float %}
    {% set E = printer["gcode_macro START_PRINT"].retract|float %}
    CLEAR_PAUSE
    M220 S100                                                             # reset feedrate
    M221 S100                                                             # reset flowrate
    G90                                                                   # absolute positioning
    M83                                                                   # relative extrusion mode
    SET_VELOCITY_LIMIT ACCEL=6000
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL=4000
    UPDATE_DELAYED_GCODE ID=DELAY_HEATERS DURATION=0
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}            # set bed temp
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp}                 # wait for bed temp
    COUNTDOWN TIME=60 MSG="Warming up: "                                  # preheat
    SET_GCODE_OFFSET Z=0.0
    G28                                                                   # home
    Z_TILT_ADJUST
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}         # set extruder temp
    G28                                                                   # home  
    G1 X50 Y50 Z5 F7000                                                   # go to start location
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}              # wait for extruder temp
    G0 Z10 F1500                                                          # raise Z
    G92 E0                                                                # reset extruder
    PRIME_LINE                                                            # prime line
    G1 Z2 F1500                                                           # raise Z
    G92 E0                                                                # reset extruder

[gcode_macro _END_PRINT_Upstreamfish]
gcode:
    {% set E = printer["gcode_macro START_PRINT"].retract|float %}
    TURN_OFF_HEATERS
    M107                                                                        # turn off fan
    G91                                                                         # relative positioning
    G1 E-{E} F1500                                                              # retract
    G0 X5 Y5 Z0.2 F5000                                                         # wipe
    G0 Z2 F1500                                                                 # raise Z
    G90                                                                         # absolute positioning
    PARK
    M84                                                                         # turn off all motors
    BEEP P=200 S=250
    M106 S255                                                                   # nozzle cooldown
    UPDATE_DELAYED_GCODE ID=nozzle_cooldown DURATION=90







